// Function to generate an HTML table from a list of data
// I need stateCoords = [item.properties.lat, item.properties.lon] 
// let lightpollu_path = '../api_data/Resources/lightpollution_v2.csv'
let stateCoords;
let stay_places_data = [];

document.getElementById('selState').onchange = function() {
    let selectedState = this.value;
    getStateCoordidates(selectedState);
};
// Find locaion for the selected state from homepage
function getStateCoordidates(state){
    let geoapify_url = `https://api.geoapify.com/v1/geocode/search?state=${state}&type=state&country=United%20States%20of%20America.&format=geojson&apiKey=${geoapify_key}`
    // d3.json(geoapify_url).then(stateCoordinate)
    fetch(geoapify_url)
    .then(response =>  response.json())
    .then(stateCoordinate)
    .catch(error => console.error('Error:', error));

    function stateCoordinate(response){
        for (item of response.features){
          if (item.properties.state_code == state){
            stateCoords = [item.properties.lat, item.properties.lon]
            console.log(stateCoords);
            sendDataToBackend(stateCoords);
            return
          }
          else{break}
        }
      }
    }

// Get moon_weather_data from  http://localhost:5000/api/v1.0/moon-weather-data generated by flask in python file (app.py)
function sendDataToBackend(data) {
    fetch('http://localhost:5000/api/v1.0/moon-weather-data', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json;charset=UTF-8'
        },
        body: JSON.stringify(data)
    })
    .then(response => response.json())
    .then(data => {
        console.log(data);
        const jsonData = JSON.parse(data);
        console.log(jsonData);
        console.log(typeof jsonData); 
        //call createMoonWeatherDataTable function for making a table
        createMoonWeatherDataTable(jsonData);
    })
    .catch(error => console.error('Error:', error));
}

// Make table of moon_weather_data
function createMoonWeatherDataTable(data) {
    resetTable();
    addTableHeaders();
    const moonDataBody = document.getElementById('moonDataBody');
    data.forEach(row => {
        console.log(row.date, row.moon_illumination, row.moon_phase); 
        const newRow = document.createElement('tr');
        const dateCell = document.createElement('td');
        dateCell.appendChild(document.createTextNode(row.date));
        newRow.appendChild(dateCell);

        const illuminationCell = document.createElement('td');
        illuminationCell.appendChild(document.createTextNode(row.moon_illumination));
        newRow.appendChild(illuminationCell);

        const phaseCell = document.createElement('td');
        phaseCell.appendChild(document.createTextNode(row.moon_phase));
        newRow.appendChild(phaseCell);

        const cloudCell = document.createElement('td');
        cloudCell.appendChild(document.createTextNode(row.cloud_cover));
        newRow.appendChild(cloudCell);

        moonDataBody.appendChild(newRow);
    });
 }
// Make a table header
function addTableHeaders() {
    const tableHeaders = ["Date", "Moon Illumination", "Moon Phase","Cloud Cover (Total)"];
    const headerRow = document.getElementById('tableHeaders');
    tableHeaders.forEach(header => {
        const th = document.createElement('th');
        th.appendChild(document.createTextNode(header));
        headerRow.appendChild(th);
    });
}

// reset the table after selecting another state
function resetTable() {
    const moonDataBody = document.getElementById('moonDataBody');
    while (moonDataBody.firstChild) {
        moonDataBody.removeChild(moonDataBody.firstChild);
    }
}

